# This is a basic workflow to help you get started with Actions

name: CI

env:
  GODOT_VERSION: 4.2.1
  
# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  export-web:
    name: Web Export
    runs-on: ubuntu-latest
    container:
      image: barichello/godot-ci:4.2.1
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          lfs: true
      - name: Setup
        run: |
          mkdir -v -p ~/.local/share/godot/templates
          mv /root/.local/share/godot/templates/${GODOT_VERSION}.stable ~/.local/share/godot/templates/${GODOT_VERSION}.stable
      - name: Web Build
        run: |
          mkdir -v -p build/web
          godot -v --export-release "HTML5" ./build/web/index.html
          echo '       <script>if ("undefined" == typeof window) { async function e(e) { if ("only-if-cached" === e.cache && "same-origin" !== e.mode) return; "no-cors" === e.mode && (e = new Request(e.url, { cache: e.cache, credentials: "omit", headers: e.headers, integrity: e.integrity, destination: e.destination, keepalive: e.keepalive, method: e.method, mode: e.mode, redirect: e.redirect, referrer: e.referrer, referrerPolicy: e.referrerPolicy, signal: e.signal })); let r = await fetch(e).catch(e => console.error(e)); if (0 === r.status) return r; let t = new Headers(r.headers); return t.set("Cross-Origin-Embedder-Policy", "credentialless"), t.set("Cross-Origin-Opener-Policy", "same-origin"), new Response(r.body, { status: r.status, statusText: r.statusText, headers: t }) } self.addEventListener("install", () => self.skipWaiting()), self.addEventListener("activate", e => e.waitUntil(self.clients.claim())), self.addEventListener("fetch", function (r) { r.respondWith(e(r.request)) }) } else !async function () { if (!1 !== window.crossOriginIsolated) return; let e = await navigator.serviceWorker.register(window.document.currentScript.src).catch(e => console.error("COOP/COEP Service Worker failed to register:", e)); e && (console.log("COOP/COEP Service Worker registered", e.scope), e.addEventListener("updatefound", () => { console.log("Reloading page to make use of updated COOP/COEP Service Worker."), window.location.reload() }), e.active && !navigator.serviceWorker.controller && (console.log("Reloading page to make use of COOP/COEP Service Worker."), window.location.reload())) }();</script>' > ./build/web/hack-enable-threads.html
          sed -i -e '/<head>/r ./build/web/hack-enable-threads.html' ./build/web/index.html
      - name: Upload Artifact
        uses: actions/upload-artifact@v1
        with:
          name: web
          path: build/web
      # Installing rsync is needed in order to deploy to GitHub Pages. Without it, the build will fail.
      - name: Install rsync ðŸ“š
        run: |
          apt-get update && apt-get install -y rsync
      - name: Deploy to GitHub Pages ðŸš€
        uses: JamesIves/github-pages-deploy-action@releases/v3
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH: main # The branch the action should deploy to.
          FOLDER: build/web # The folder the action should deploy.